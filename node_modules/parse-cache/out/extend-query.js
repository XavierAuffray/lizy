'use strict';

var generateKey = require('./generate-key');

module.exports = function (Parse, cache) {
  var originalOperations = {
    find: Parse.Query.prototype.find,
    first: Parse.Query.prototype.first,
    count: Parse.Query.prototype.count,
    countDocuments: Parse.Query.prototype.countDocuments,
    estimatedDocumentCount: Parse.Query.prototype.estimatedDocumentCount,
    aggregate: Parse.Query.prototype.aggregate,
    each: Parse.Query.prototype.each,
    get: Parse.Query.prototype.get,
    distinct: Parse.Query.prototype.distinct
  };
  Object.keys(originalOperations).forEach(function (operation) {
    Parse.Query.prototype[operation] = function () {
      var _this = this,
          _arguments = arguments;

      if (!this.hasOwnProperty('_ttl')) return originalOperations[operation].apply(this, arguments);
      this.args = arguments;
      this.operation = operation;
      var key = this._key || this.getCacheKey();
      var ttl = this._ttl;
      var isNotParseObjects = ['distinct', 'count', 'countDocuments', 'estimatedDocumentCount'].includes(operation);
      var model = this.className;
      return new Promise(function (resolve, reject) {
        cache.get(key, function (err, cachedResults) {
          //eslint-disable-line handle-callback-err
          if (cachedResults != null) {
            if (isNotParseObjects) {
              return resolve(cachedResults);
            }

            var inflate = inflateModel({
              Parse: Parse,
              model: model
            });
            cachedResults = Array.isArray(cachedResults) ? cachedResults.map(inflate) : inflate(cachedResults);
            return resolve(cachedResults);
          }

          originalOperations[operation].apply(_this, _arguments).then(function (results) {
            cache.set(key, results, ttl, function () {
              return resolve(results);
            });
          }).catch(function (err) {
            reject(err);
          });
        });
      });
    };
  });

  Parse.Query.prototype.cache = function () {
    var ttl = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 60;
    var customKey = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';

    if (typeof ttl === 'string') {
      customKey = ttl;
      ttl = 60;
    }

    this._ttl = ttl;
    this._key = customKey;
    return this;
  };

  Parse.Query.prototype.getCacheKey = function () {
    var key = {
      operation: this.operation,
      model: this.className,
      args: this.args,
      skip: this._skip,
      limit: this._limit,
      sort: this._order,
      select: this._select,
      extraOptions: this._extraOptions,
      where: this._where
    };
    return generateKey(key);
  };
};

function inflateModel(_ref) {
  var Parse = _ref.Parse,
      model = _ref.model;
  return function (data) {
    data.__type = data.__type || 'Object';
    data.className = data.className || model;
    var obj = Parse.Object.fromJSON(data);
    obj.fromCache = true;
    return obj;
  };
}